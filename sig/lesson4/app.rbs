interface _View
  def render: () -> void
end

module Lesson4
  module App
    class Config
      class ConfigurationError < StandardError
      end

      class Routes
        @routes: Hash[Symbol, untyped]

        attr_reader self.routes: Hash[Symbol, untyped]

        def self.draw: { () -> void } -> void
        def self.menu: (Symbol key, to: untyped) -> void
        def self.clear: () -> void

        def self.method_missing: (Symbol method_name, *untyped args) -> untyped
        def self.respond_to_missing?: (Symbol method_name, bool include_private) -> bool

        private

        def self.resolve_controller_class: (String class_name) -> untyped
        def self.camelize: (String string) -> String
        def self.underscore: (String string) -> String
      end

      self.@db_adapter: untyped
      self.@l10n_path: String?
      self.@routes_path: String?

      attr_writer self.db_adapter: untyped
      attr_writer self.l10n_path: String?
      attr_writer self.routes_path: String?

      def self.configure: { (self) -> void } -> void
      def self.db_adapter: () -> untyped
      def self.l10n_path: () -> String
      def self.routes_path: () -> String
    end

    module Controller
      class BaseController
        attr_reader view: _View

        def initialize: (_View view) -> void
        def execute: () -> void
      end
    end

    module Model
      class Base
        self.@table_name: String

        attr_accessor self.db_adapter: DatabaseAdapter::Base?
        attr_reader id: String?
        attr_accessor attributes: Hash[String, untyped]

        def self.table_name: () -> String
        def self.find: (id: String) -> Base?
        def self.all: () -> Array[Base]
        def self.create: (attributes: Hash[String, untyped]) -> Base

        def initialize: (attributes: Hash[String, untyped]) -> void
        def save: () -> Base
        def destroy: () -> void

        private

        def self.wrap: (Hash[String, untyped]?) -> Base?
      end
    end

    class LocalizationError < StandardError
    end

    def self.l10n: () -> Hash[Symbol, untyped]
    def self.dir: () -> String?
    def self.db_adapter: () -> DatabaseAdapter::SimpleDB
  end
end